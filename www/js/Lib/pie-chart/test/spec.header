'use strict';

/*global window */

describe('n3-piechart', function() {
  beforeEach(module('n3-pie-chart'));

  beforeEach(function() {
    this.addMatchers({
      toBeSameStyleAs: function(expected) {
        var actual = this.actual;
        var notText = this.isNot ? " not" : "";

        this.message = function () {
          return "Expected " + actual + notText + " to be same as " + expected;
        };

        var exp = expected.split(/\s*;\s*/g);
        var comp = actual.split(/\s*;\s*/g);

        var colors = ['fill', 'stroke'];

        for (var key in exp) {
          if (comp[key] === undefined) {
            return false;
          }

          if (comp[key] !== exp[key]) {
            var spl = comp[key].split(/\s*:\s*/);
            var expSpl = exp[key].split(/\s*:\s*/);

            if (colors.indexOf(spl[0]) !== -1) {
              if (d3.rgb(spl[1]).toString() !== d3.rgb(expSpl[1]).toString()) {
                return false;
              }
            } else {
              return false;
            }
          }
        }

        return true;
      },
      
      toBeSamePathAs: function(expected) {
        var actual = this.actual;
        var notText = this.isNot ? " not" : "";

        var errorMsg = "";

        this.message = function () {
          return "Expected " + actual + notText + " to be same path as " + expected + " (" + errorMsg + ")";
        };
        
        if (!actual) {
          return false;
        }
        
        var getInstructions = function(path) {
          var a = [];
          
          var sp = path.split(/([A-Z])/g);
          
          for (var i = 1; i < sp.length; i+=2) {
            a.push({type: sp[i], values: sp[i+1].split(/[\s,]/)});
          }
          
          return a;
        };
        
        var expectedArray = getInstructions(expected);
        var actualArray = getInstructions(actual);
        
        if (expectedArray.length !== actualArray.length) {
          return false;
        }
        
        for (var i = 0; i < expectedArray.length; i++) {
          var a = expectedArray[i];
          var b = actualArray[i];
          
          if (a.type !== b.type) {
            errorMsg = a.type + " !== " + b.type;
            return false;
          }
          
          if (a.values.length !== b.values.length) {
            errorMsg = "different values length";
            return false;
          }
          
          for (var j = 0; j < a.values.length; j++) {
            var vA = a.values[j];
            var vB = b.values[j];
            
            if (parseInt(vA, 10) !== parseInt(vB, 10) && vA !== "" && vB !== "") {
              errorMsg = vA + " !== " + vB;
              return false;
            }
          }
        }
        
        return true;
      }
      
    });
  });
